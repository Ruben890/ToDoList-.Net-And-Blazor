@using Frontend.Shared
@inject TaskService TaskService

@if (tasks?.Count == 0)
{
    <div class="container m-auto p-3">
        <p class="fs-3">No tasks available.</p>
    </div>

}else if(tasks == null)
{
    <Loading/>
}
else
{
    
    <div class="p-3 m-2">
        <div>
            @foreach (var task in tasks)
            {
                <div class="card p-2 m-2">
                    <h2>@task.Title</h2>
                    <div class="card-body">
                        <p>@task.Description</p>
                    </div>

                    <div class="card-footer">
                        <strong>@task.DateCreated</strong>
                    </div>
                </div>
            }
        </div>
       
    </div>
}


@code{
    private List<TaskDTO>? tasks;

    [Parameter]
    [EditorRequired]
    public string? SearchTitle { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        await LoadTaskList();
    }

    private async Task LoadTaskList()
    {
        try
        {
            if (string.IsNullOrEmpty(SearchTitle))
            {
                tasks = await TaskService.GetTasks();
            }
            else
            {
                tasks = await TaskService.SearchTask(SearchTitle);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving tasks: {ex.Message}");
        }
    }
}