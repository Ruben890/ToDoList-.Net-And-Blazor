@using Frontend.Services
@using Frontend.Shared
@using Newtonsoft.Json
@inject IRequestService Service;



@if (ToDoList!.Count <= 0)
{
    <div class="container p-3 d-flex justify-content-center m-3">
        <div class="p-2">
            <p class="fs-3"> No hay tareas Disponibles </p>
        </div>
    </div>
}

<div class="p-3 m-2">
    <div>
        @foreach (var task in ToDoList!)
        {
            string headerColorClass = task.IsCompleted ? "bg-success" : "bg-danger";
            string isCompleteContent = task.IsCompleted ? "Complete" : " Incomplete";
            string truncatedDescription = task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description;

            <div class="card p-2 m-2 mt-5">
                <div class="m-2">
                    <button 
                        type="button" 
                        class="btn btn-primary" 
                        data-bs-toggle="modal" 
                        data-bs-target="#staticBackdrop"
                            @onclick="() => OnEditAsync(task)">
                        Edictat Tarea
                    </button>
                </div>
                <div class="d-flex w-100 justify-content-between card-header @headerColorClass">

                    <h2>@task.Title</h2>
                    <button class="text-white p-2 text-center fs-4 btn border btn-isCompleteC">
                        @isCompleteContent
                    </button>
                </div>

                <div class="card-body">
                    <p>@truncatedDescription</p>
                </div>

                <div class="card-footer">
                    <strong>@task.DateCreated</strong>
                </div>
            </div>
        }
    </div>

</div>


@code {
    public List<ToDoDTO>? ToDoList { get; set; }

    

    [Parameter]
    [EditorRequired]
    public string? SearchTitle { get; set; }

    [Parameter]
    public EventCallback<ToDoDTO> OnEdit { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        ToDoList ??= new();

        var token = await Service!.GetCookie("AuthToken");
        string url = string.IsNullOrEmpty(SearchTitle) ? "Tasks" : $"Tasks/Search?title={SearchTitle}";
        Service.SetAuthorizationToken(token);

        var response = await Service!.GetAllAsync(url);
        if (!string.IsNullOrEmpty(response))
        {
            ToDoList = JsonConvert.DeserializeObject<List<ToDoDTO>>(response);
        }

    }

    private async Task OnEditAsync(ToDoDTO todo)
    {
        await OnEdit.InvokeAsync(todo);
    }


}