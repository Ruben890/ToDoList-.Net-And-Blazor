



<div class="container">

    @if (toDo is not null)
    {
        <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="staticBackdropLabel">Actulizar Tarea</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="container p-3">
                                <label form="title" class="form-label">Title</label>
                                <input type="text" name="title"  placeholder="Title" maxlength="100" class="form-control"  @bind="@toDo.Title"/>
                                <label for="Description" class="form-label" >Description</label>
                                <textarea class="form-control" @bind="@toDo.Description" style="resize: none; height:150px" maxlength="300"></textarea>
                               <div class="d-flex">
                                    <InputCheckbox class="form-check" @bind-Value="@toDo.IsCompleted" DisplayName="IsCompleted" />
                                    <label class="form-label ms-2 mt-1" for="IsCompleted">Tarea completada</label>
                               </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Guardar Cambios</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>




@code {
    [Parameter]
    [EditorRequired]
    public ToDoDTO? toDo { get; set; }

    [Inject]
    public IRequestService? Service { get; set; }


    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }








}
